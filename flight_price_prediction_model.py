# -*- coding: utf-8 -*-
"""Flight_price_prediction_model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1X3fCJRG6_obzIuRacKABadartz6wIW3I
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.tree import DecisionTreeRegressor
from sklearn.svm import SVR
import joblib

df = pd.read_csv(r"C:\Users\Shruti Sharma\Downloads\Flight_Price.csv")

df['Journey_Day'] = pd.to_datetime(df['Date_of_Journey'], format='%d/%m/%Y').dt.day
df['Journey_Month'] = pd.to_datetime(df['Date_of_Journey'], format='%d/%m/%Y').dt.month

df.head()

df['Dep_Hour'] = pd.to_datetime(df['Dep_Time']).dt.hour
df['Dep_Minute'] = pd.to_datetime(df['Dep_Time']).dt.minute
df['Arrival_Hour'] = pd.to_datetime(df['Arrival_Time']).dt.hour
df['Arrival_Minute'] = pd.to_datetime(df['Arrival_Time']).dt.minute

df.head()

duration = df['Duration'].str.extract('(?P<Hours>\d+)h (?P<Minutes>\d+)m', expand=True).fillna(0)
df['Duration_Minutes'] = duration['Hours'].astype(int) * 60 + duration['Minutes'].astype(int)

df.drop(['Date_of_Journey', 'Dep_Time', 'Arrival_Time', 'Duration', 'Route', 'Additional_Info'], axis=1, inplace=True)
df.head()

categorical_cols = ['Airline', 'Source', 'Destination', 'Total_Stops']
label_encoder = LabelEncoder()
for col in categorical_cols:
    df[col] = label_encoder.fit_transform(df[col])

X = df.drop('Price', axis=1)
y = df['Price']

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

def evaluate_model(model, X_train, X_test, y_train, y_test):
    model.fit(X_train, y_train)
    predictions = model.predict(X_test)
    mae = mean_absolute_error(y_test, predictions)
    mse = mean_squared_error(y_test, predictions)
    r2 = r2_score(y_test, predictions)
    return mae, mse, r2

models = {
    "Linear Regression": LinearRegression(),
    "Random Forest": RandomForestRegressor(random_state=42),
    "Decision Tree": DecisionTreeRegressor(random_state=42),
    "Support Vector Regression": SVR()
}

results = {}
for model_name, model in models.items():
    mae, mse, r2 = evaluate_model(model, X_train, X_test, y_train, y_test)
    results[model_name] = {"MAE": mae, "MSE": mse, "R2": r2}

results_df = pd.DataFrame(results).T.sort_values(by="R2", ascending=False)
print("Model Performance Comparison:\n", results_df)

best_model_name = results_df.index[0]
best_model = models[best_model_name]
best_model.fit(X_train, y_train)

print(f"The best-performing model is: {best_model_name}")

def get_df():
    return df
def get_models():
    return models
for model_name, model in models.items():
    if model_name == "Random Forest":
        a = model  

import streamlit as st



st.write("""
# Simple flight price prediction app
this app predicts time
""")
st.sidebar.header('user imput parameters')
def user_input_features():
    Airline = st.sidebar.slider('Airline', 0 , 11 , 0)
    Source = st.sidebar.slider('Source' , 0 , 4 , 0)
    Destination = st.sidebar.slider('Destination',0 , 5 ,0)
    Total_Stops = st.sidebar.slider('Total_stops' , 0 , 5 , 0)
    Journey_Day = st.sidebar.slider('Journey_Day', 0 , 30 , 27)
    Journey_Month = st.sidebar.slider('Journey_Month',3 , 6, 5)
    Dep_Hour = st.sidebar.slider('Dep_Hour' ,0 , 23, 15)
    Dep_Minute = st.sidebar.slider('Dep_Minute' , 0 , 55,30)
    Arrival_Hour = st.sidebar.slider('Arrival_Hour',0 , 23 , 15)
    Arrival_Minute = st.sidebar.slider('Arrival_Minute' , 0 , 55 , 30)
    Duration_Minutes = st.sidebar.slider('Duration_Minutes' , 0 , 2860 , 1000)
    data = {
        'Airline' : Airline ,
        'Source' : Source ,
        'Destination' :  Destination ,
        'Total_Stops' : Total_Stops ,
        'Journey_Day' : Journey_Day ,
        'Journey_Month' : Journey_Month ,
        'Dep_Hour' : Dep_Hour ,
        'Dep_Minute' : Dep_Minute ,
        'Arrival_Hour' : Arrival_Hour ,
        'Arrival_Minute' : Arrival_Minute ,
        'Duration_Minutes' : Duration_Minutes}
    
    features = pd.DataFrame(data , index = [0])
    return features
f = user_input_features()
st.subheader('User Input Parameters')
st.write(f)


prediction = a.predict(f)
st.subheader('Prediction')
st.write(prediction)


